#!/usr/bin/env ruby

require 'gitodo'

options = Gitodo::CommandLineOptions.parse(ARGV)

def are_count_todos(count)
  (count == 1) ? "is #{count_todos(count)}" : "are #{count_todos(count)}"
end

def count_todos(count)
  (count == 1) ? "#{count} todo" : "#{count} todos"
end

def do_add()
  todo = ARGV.join(" ").strip
  form = Gitodo::AddTodoForm.new({ todo: todo })
  Gitodo::AddTodoCommand.call(add_form: form) do |m|
    m.fail {|_, result| puts result.message; exit 1 }
    m.pass do |val|
      puts %Q(Todo added. There #{are_count_todos(val.todo_count)} on branch `#{val.branch}`)
    end
  end
end

def do_done()
  @todo_indexes = ARGV
  @needs_confirmation = true
  @confirmed = false

  # Handle No Arguments
  if @todo_indexes.empty?
    # print confirmation
    Gitodo::ListTodoCommand.call do |m|
      m.fail {|_, result| puts result.message; exit 1 }
      m.pass do |val, result|
        message = %Q(Which todos have you finished?)

        val.todos.each do |todo|
          message << "\n\t[#{todo.display_index}] #{todo.todo}"
        end

        puts message
        print "> "

        @todo_indexes = STDIN.gets.strip.split(" ")
      end
    end
  end

  # if '!' chomp it and skip confirmation
  if ARGV.include? '!'
    ARGV.delete '!'
    @needs_confirmation = false
  end

  # handle the confirmation
  if @needs_confirmation

    form = Gitodo::ListTodoForm.new(todo_indexes: @todo_indexes)
    Gitodo::ListTodoCommand.call(list_form: form) do |m|
      m.fail {|_, result| puts result.message; exit 1 }
      m.pass do |val, result|
        message = "Finishing #{count_todos(val.todos.count)}."

        val.todos.each do |todo|
          message << "\n\t[#{todo.display_index}] #{todo.todo}"
        end

        message << "\nIs that correct? [y/n]"

        puts message
        print "> "

        response = STDIN.gets.strip

        unless response.downcase == "y"
          puts "Not finishing any todos."
          exit 1
        end
      end
    end
  end

  form = Gitodo::DoneTodoForm.new({ todo_indexes: @todo_indexes })
  Gitodo::DoneTodoCommand.call(done_form: form) do |m|
    m.fail {|_, result| puts result.message; exit 1 }
    m.pass do |val|
      puts %Q(Todo added. There #{are_count_todos(val.todo_count)} on branch `#{val.branch}`)
    end
  end
end

def do_list()
  Gitodo::ListTodoCommand.call do |m|
    m.fail {|_, result| puts result.message; exit 1 }
    m.pass do |val, result|
      message = %Q(There #{are_count_todos(val.todos.count)} on branch `#{val.branch}`)

      val.todos.each do |todo|
        message << "\n\t[#{todo.display_index}] #{todo.todo}"
      end

      puts message
    end
  end
end

def do_check()
  Gitodo::ListTodoCommand.call do |m|
    m.fail {|_, result| puts result.message; exit 1 }
    m.pass do |val, result|
      if (val.todos.any?)
        puts %Q(Check failed! There #{are_count_todos(val.todos.count)} on `#{val.branch}`)
        exit 1
      end

      puts %Q(Check passed! `#{val.branch}` is clean!)
    end
  end
end

case options.command
when "add"
  do_add
when "done"
  do_done
when "list"
  do_list
when "check"
  do_check
else
  puts "Command not recognized"
  exit 1
end
